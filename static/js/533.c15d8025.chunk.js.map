{"version":3,"file":"static/js/533.c15d8025.chunk.js","mappings":"+SAMA,MAuHA,EAvHwCA,IAA6C,IAA5C,WAAEC,EAAU,aAAEC,EAAY,SAAEC,GAAUH,EAE3E,MAKMI,EAAiBC,EAAAA,GAAW,CAC9BC,WAAYD,EAAAA,KACPE,SAAS,YACdC,WAAYH,EAAAA,KACPE,SAAS,cAUlB,OACIE,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACHC,cArBS,CACbL,WAAY,GACZE,WAAY,IAoBRI,iBAAkBR,EAClBD,SAXiBU,gBACfV,EAAS,CACXG,WAAYQ,EAAOR,WACnBE,WAAYM,EAAON,YACrB,EAO6BO,SAE1BC,IAAA,IAAC,OACEC,EAAM,WACNC,EAAU,aACVC,EAAY,aACZC,EAAY,QACZC,EAAO,OACPP,GACHE,EAAA,OACGP,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAP,UACIN,EAAAA,EAAAA,KAACc,EAAAA,EAAI,CAACpB,SAAUiB,EAAaL,UACzBS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAV,SAAA,EACAN,EAAAA,EAAAA,KAACiB,EAAAA,EAAG,CAACC,GAAI,EAAEZ,UAEPS,EAAAA,EAAAA,MAACD,EAAAA,EAAKK,MAAK,CAAAb,SAAA,EACPS,EAAAA,EAAAA,MAACD,EAAAA,EAAKM,QAAO,CACTC,KAAK,KACLC,GAAG,SACHC,GAAG,iBACHC,KAAK,aACLC,MAAOpB,EAAOR,WACd6B,UAAWC,QAAQf,EAAQf,YAAcW,EAAOX,YAChD+B,OAAQnB,EACRoB,SAAUnB,EAAaJ,SAAA,EAEvBN,EAAAA,EAAAA,KAAA,UAAQ8B,UAAQ,EAACL,MAAM,GAAEnB,SAAC,sBAEtBd,EAAWuC,KAAIC,IACXhC,EAAAA,EAAAA,KAAA,UAA0ByB,MAAOO,EAAST,GAAGjB,SACxC0B,EAASR,MADDQ,EAAST,WAM/BX,EAAQf,aACPG,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAP,UACIN,EAAAA,EAAAA,KAACc,EAAAA,EAAKM,QAAQa,SAAQ,CAACC,KAAK,UAAS5B,SAChCE,EAAOX,qBAM5BG,EAAAA,EAAAA,KAACiB,EAAAA,EAAG,CAACC,GAAI,EAAEZ,UAEPS,EAAAA,EAAAA,MAACD,EAAAA,EAAKK,MAAK,CAAAb,SAAA,EACPS,EAAAA,EAAAA,MAACD,EAAAA,EAAKM,QAAO,CACTC,KAAK,KACLC,GAAG,SACHC,GAAG,mBACHC,KAAK,aACLC,MAAOpB,EAAON,WACd2B,UAAWC,QAAQf,EAAQb,YAAcS,EAAOT,YAChD6B,OAAQnB,EACRoB,SAAUnB,EAAaJ,SAAA,EAEvBN,EAAAA,EAAAA,KAAA,UAAQ8B,UAAQ,EAACL,MAAM,GAAEnB,SAAC,sBAEtB6B,EAAAA,EAAuBJ,KAAI,CAAChC,EAAYqC,KACpCpC,EAAAA,EAAAA,KAAA,UAAoByB,MAAO1B,EAAW0B,MAAMnB,SACvCP,EAAWsC,QADHD,UAMtBxB,EAAQb,aACPC,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAP,UACIN,EAAAA,EAAAA,KAACc,EAAAA,EAAKM,QAAQa,SAAQ,CAACC,KAAK,UAAS5B,SAChCE,EAAOT,qBAM5BC,EAAAA,EAAAA,KAACiB,EAAAA,EAAG,CAACC,GAAI,EAAEZ,UACPN,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CACHf,GAAG,YACHW,KAAK,SACLK,QAAQ,UACRlB,KAAK,KACLS,SAAUrC,EAAaa,SAC1B,mBAMd,GAEF,EC3FXkC,EAAejC,IAA2D,IAA1D,SAAEkC,EAAQ,QAAEC,EAAO,cAAEC,EAAa,eAAEC,GAAgBrC,EACtE,OACIQ,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAP,SAAA,EACIN,EAAAA,EAAAA,KAAA,KAAG6C,wBAAyB,CAAEC,OAAQL,KAElCC,EAAQX,KAAI,CAACgB,EAAQX,KACjBpC,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CAEHU,UAAU,YACVT,aACuBU,IAAlBN,GAA+BA,IAAkBI,EAC5C,UACA,kBAEVG,QAASA,IAAMN,EAAe,CAAEH,WAAUM,WAAUzC,UAEpDN,EAAAA,EAAAA,KAAA,QAAM6C,wBAAyB,CAAEC,OAAQC,MATpCX,OAalB,EAIX,EAnDqB7C,IAA8D,IAA7D,UAAE4D,EAAS,eAAEC,EAAc,eAAER,EAAc,SAAElD,GAAUH,EAEzE,OACIwB,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAP,SAAA,CAEQ6C,EAAUpB,KAAI,CAACU,EAAUL,KAAK,IAAAiB,EAAA,OAC1BrD,EAAAA,EAAAA,KAACwC,EAAY,CAETC,SAAUA,EAASA,SACnBC,QAASD,EAASC,QAClBC,cAA+E,QAAlEU,EAAED,EAAeE,MAAKC,GAAQA,EAAKd,WAAaA,EAASA,kBAAS,IAAAY,OAAA,EAAhEA,EAAkEN,OACjFH,eAAgBA,GAJXR,EAKP,IAIgB,IAArBe,EAAUK,QAAgBL,EAAUK,SAAWJ,EAAeI,SAC/DxD,EAAAA,EAAAA,KAAA,OAAKgD,UAAU,oBAAmB1C,UAC9BN,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CAACY,QAASxD,EAASY,SAAC,eAKpC,ECwCX,GAAemD,EAAAA,EAAAA,KACbC,IACS,CACLC,mBAAmBC,EAAAA,EAAAA,IAAcF,GACjCP,WAAWU,EAAAA,EAAAA,IAAoBH,GAC/BN,gBAAgBU,EAAAA,EAAAA,GAAyBJ,MAG7C,CAAEK,oBAAmB,KAAEC,sBAAqB,KAAEC,mBAAmB,MARnE,EAxDsB1E,IAGf,IAHgB,kBACrBoE,EAAiB,UAAER,EAAS,eAAEC,EAAc,oBAC5CW,EAAmB,sBAAEC,EAAqB,mBAAEC,GAC7C1E,EAEC,MAAM2E,GAAWC,EAAAA,EAAAA,OAEV3E,EAAY4E,IAAiBC,EAAAA,EAAAA,UAAS,KAE7CC,EAAAA,EAAAA,YAAU,KAKRP,IAJyB3D,WACvB,MAAMmE,QAAaC,EAAAA,EAAYC,mBAC/BL,EAAcG,EAAKG,kBAAkB,EAGvCD,EAAkB,GACjB,CAACV,IAEJ,MAAMY,GAA2BC,EAAAA,EAAAA,cAAY,KAC3CV,EAAS,WAAW,GACnB,CAACA,IAEEW,GAAsCC,EAAAA,EAAAA,UAAQ,KAClD9E,EAAAA,EAAAA,KAAC+E,EAA+B,CAC9BvF,WAAYA,EACZC,aAAckE,EACdjE,SAAUsE,KAEV,CAACxE,EAAYmE,EAAmBK,IAE9BgB,GAAmBF,EAAAA,EAAAA,UAAQ,KAC/B9E,EAAAA,EAAAA,KAACiF,EAAY,CACX9B,UAAWA,EACXC,eAAgBA,EAChBR,eAAgBqB,EAChBvE,SAAUiF,KAEV,CAACxB,EAAWC,EAAgBa,EAAoBU,IAEpD,OACE3E,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAP,UACES,EAAAA,EAAAA,MAACmE,EAAAA,EAAS,CAACC,OAAK,EAACnC,UAAU,MAAK1C,SAAA,EAC9BN,EAAAA,EAAAA,KAAA,MAAIgD,UAAU,cAAa1C,SAAC,gBAC5BN,EAAAA,EAAAA,KAAA,OAAKgD,UAAU,OAAM1C,SAClBuE,IAEmB,IAArB1B,EAAUK,SACTxD,EAAAA,EAAAA,KAAA,OAAKgD,UAAU,qCAAoC1C,UACjDN,EAAAA,EAAAA,KAAA,OAAAM,SAAM0E,UAIX,G,+DC3DP,MAAMI,GAA6BC,EAAAA,EAAAA,KAC9B3B,GAAUA,EAAMjB,WACjBiB,GAASA,EAAMP,YAEbmC,GAAwBD,EAAAA,EAAAA,KACzB3B,GAAUA,EAAMjB,WACjBiB,GAASA,EAAM6B,YAEbC,GAAkCH,EAAAA,EAAAA,KACnC3B,GAAUA,EAAMjB,WACjBiB,GAASA,EAAMN,iBAGNS,EAAuBH,GACzB0B,EAA2B1B,GAGzBE,EAAiBF,GACnB4B,EAAsB5B,GAGpBI,EAA4BJ,GAC9B8B,EAAgC9B,E","sources":["components/FilterCategoryAndDifficultyForm.js","components/QuestionForm.js","containers/QuizMaker.js","redux/selectors/QuestionSelector.js"],"sourcesContent":["import React from \"react\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { DIFFICULTY_SELECT_LIST } from \"../utils/Constant\";\r\n\r\nconst FilterCategoryAndDifficultyForm = ({ categories, isSubmitting, onSubmit }) => {\r\n\r\n    const initForm = {\r\n        categoryId: \"\",\r\n        difficulty: \"\"\r\n    };\r\n\r\n    const validationForm = Yup.object({\r\n        categoryId: Yup.number()\r\n            .required('Required'),\r\n        difficulty: Yup.string()\r\n            .required('Required')\r\n    });\r\n\r\n    const handleSubmitForm = async (values) => {\r\n        await onSubmit({\r\n            categoryId: values.categoryId,\r\n            difficulty: values.difficulty\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initForm}\r\n            validationSchema={validationForm}\r\n            onSubmit={handleSubmitForm}\r\n        >\r\n            {({\r\n                errors,\r\n                handleBlur,\r\n                handleChange,\r\n                handleSubmit,\r\n                touched,\r\n                values,\r\n            }) => (\r\n                <>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Row>\r\n                            <Col md={5}>\r\n                                {/* Category */}\r\n                                <Form.Group>\r\n                                    <Form.Control\r\n                                        size=\"md\"\r\n                                        as=\"select\"\r\n                                        id=\"categorySelect\"\r\n                                        name=\"categoryId\"\r\n                                        value={values.categoryId}\r\n                                        isInvalid={Boolean(touched.categoryId && errors.categoryId)}\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}\r\n                                    >\r\n                                        <option disabled value=\"\">Select a category</option>\r\n                                        {\r\n                                            categories.map(category =>\r\n                                                <option key={category.id} value={category.id}>\r\n                                                    {category.name}\r\n                                                </option>\r\n                                            )\r\n                                        }\r\n                                    </Form.Control>\r\n                                    {!!touched.categoryId && (\r\n                                        <>\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors.categoryId}\r\n                                            </Form.Control.Feedback>\r\n                                        </>\r\n                                    )}\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col md={5}>\r\n                                {/* Difficulty */}\r\n                                <Form.Group>\r\n                                    <Form.Control\r\n                                        size=\"md\"\r\n                                        as=\"select\"\r\n                                        id=\"difficultySelect\"\r\n                                        name=\"difficulty\"\r\n                                        value={values.difficulty}\r\n                                        isInvalid={Boolean(touched.difficulty && errors.difficulty)}\r\n                                        onBlur={handleBlur}\r\n                                        onChange={handleChange}\r\n                                    >\r\n                                        <option disabled value=\"\">Select difficulty</option>\r\n                                        {\r\n                                            DIFFICULTY_SELECT_LIST.map((difficulty, index) =>\r\n                                                <option key={index} value={difficulty.value}>\r\n                                                    {difficulty.option}\r\n                                                </option>\r\n                                            )\r\n                                        }\r\n                                    </Form.Control>\r\n                                    {!!touched.difficulty && (\r\n                                        <>\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors.difficulty}\r\n                                            </Form.Control.Feedback>\r\n                                        </>\r\n                                    )}\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col md={2}>\r\n                                <Button\r\n                                    id=\"createBtn\"\r\n                                    type=\"submit\"\r\n                                    variant=\"primary\"\r\n                                    size=\"md\"\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default FilterCategoryAndDifficultyForm;","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst QuestionForm = ({ questions, choosedAnswers, onChooseAnswer, onSubmit }) => {\r\n\r\n    return (\r\n        <>\r\n            {\r\n                questions.map((question, index) =>\r\n                    <QuestionItem\r\n                        key={index}\r\n                        question={question.question}\r\n                        answers={question.answers}\r\n                        choosedAnswer={choosedAnswers.find(item => item.question === question.question)?.answer}\r\n                        onChooseAnswer={onChooseAnswer}\r\n                    />\r\n                )\r\n            }\r\n            {\r\n                (questions.length !== 0 && questions.length === choosedAnswers.length) &&\r\n                <div className=\"mt-3 d-grid gap-2\">\r\n                    <Button onClick={onSubmit}>\r\n                        Submit\r\n                    </Button>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst QuestionItem = ({ question, answers, choosedAnswer, onChooseAnswer }) => {\r\n    return (\r\n        <>\r\n            <p dangerouslySetInnerHTML={{ __html: question }} />\r\n            {\r\n                answers.map((answer, index) =>\r\n                    <Button\r\n                        key={index}\r\n                        className=\"me-2 mb-4\"\r\n                        variant={\r\n                            (choosedAnswer !== undefined && choosedAnswer === answer)\r\n                                ? \"primary\" // choosed\r\n                                : \"outline-primary\" // not choosed\r\n                        }\r\n                        onClick={() => onChooseAnswer({ question, answer })}\r\n                    >\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </Button>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default QuestionForm;","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { resetQuestionAction, getListQuestionAction, chooseAnswerAction } from \"../redux/reducers/QuestionSlide\"\r\nimport { selectLoading, selectListQuestions, selectListChoosedAnswers } from \"../redux/selectors/QuestionSelector\"\r\nimport { Container } from \"react-bootstrap\";\r\nimport CategoryApi from \"../api/CategoryApi\";\r\nimport FilterCategoryAndDifficultyForm from \"../components/FilterCategoryAndDifficultyForm\";\r\nimport QuestionForm from \"../components/QuestionForm\";\r\n\r\nconst QuizMakerPage = ({\r\n  isQuestionLoading, questions, choosedAnswers,\r\n  resetQuestionAction, getListQuestionAction, chooseAnswerAction\r\n}) => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getAllCategories = async () => {\r\n      const data = await CategoryApi.getAllCategories();\r\n      setCategories(data.trivia_categories);\r\n    }\r\n    resetQuestionAction();\r\n    getAllCategories();\r\n  }, [resetQuestionAction]);\r\n\r\n  const redirectToQuizResultPage = useCallback(() => {\r\n    navigate(\"/results\");\r\n  }, [navigate]);\r\n\r\n  const FilterCategoryAndDifficultyFormMemo = useMemo(() =>\r\n    <FilterCategoryAndDifficultyForm\r\n      categories={categories}\r\n      isSubmitting={isQuestionLoading}\r\n      onSubmit={getListQuestionAction}\r\n    />\r\n    , [categories, isQuestionLoading, getListQuestionAction]);\r\n\r\n  const QuestionFormMemo = useMemo(() =>\r\n    <QuestionForm\r\n      questions={questions}\r\n      choosedAnswers={choosedAnswers}\r\n      onChooseAnswer={chooseAnswerAction}\r\n      onSubmit={redirectToQuizResultPage}\r\n    />\r\n    , [questions, choosedAnswers, chooseAnswerAction, redirectToQuizResultPage]);\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"p-0\">\r\n        <h2 className=\"text-center\">QUIZ MAKER</h2>\r\n        <div className=\"mt-3\">\r\n          {FilterCategoryAndDifficultyFormMemo}\r\n        </div>\r\n        {questions.length !== 0 &&\r\n          <div className=\"mt-3 d-flex justify-content-center\">\r\n            <div>{QuestionFormMemo}</div>\r\n          </div>\r\n        }\r\n      </Container>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default connect(\r\n  state => {\r\n    return {\r\n      isQuestionLoading: selectLoading(state),\r\n      questions: selectListQuestions(state),\r\n      choosedAnswers: selectListChoosedAnswers(state)\r\n    };\r\n  },\r\n  { resetQuestionAction, getListQuestionAction, chooseAnswerAction }\r\n)(QuizMakerPage);","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\n/** Selector **/\r\nconst selectListQuestionSelector = createSelector(\r\n    (state) => state.question,\r\n    state => state.questions);\r\n\r\nconst selectLoadingSelector = createSelector(\r\n    (state) => state.question,\r\n    state => state.isLoading);\r\n\r\nconst selectListChoosedAnswerSelector = createSelector(\r\n    (state) => state.question,\r\n    state => state.choosedAnswers);\r\n\r\n/** function */\r\nexport const selectListQuestions = (state) => {\r\n    return selectListQuestionSelector(state);\r\n}\r\n\r\nexport const selectLoading = (state) => {\r\n    return selectLoadingSelector(state);\r\n}\r\n\r\nexport const selectListChoosedAnswers = (state) => {\r\n    return selectListChoosedAnswerSelector(state);\r\n}"],"names":["_ref","categories","isSubmitting","onSubmit","validationForm","Yup","categoryId","required","difficulty","_jsx","Formik","initialValues","validationSchema","async","values","children","_ref2","errors","handleBlur","handleChange","handleSubmit","touched","_Fragment","Form","_jsxs","Row","Col","md","Group","Control","size","as","id","name","value","isInvalid","Boolean","onBlur","onChange","disabled","map","category","Feedback","type","DIFFICULTY_SELECT_LIST","index","option","Button","variant","QuestionItem","question","answers","choosedAnswer","onChooseAnswer","dangerouslySetInnerHTML","__html","answer","className","undefined","onClick","questions","choosedAnswers","_choosedAnswers$find","find","item","length","connect","state","isQuestionLoading","selectLoading","selectListQuestions","selectListChoosedAnswers","resetQuestionAction","getListQuestionAction","chooseAnswerAction","navigate","useNavigate","setCategories","useState","useEffect","data","CategoryApi","getAllCategories","trivia_categories","redirectToQuizResultPage","useCallback","FilterCategoryAndDifficultyFormMemo","useMemo","FilterCategoryAndDifficultyForm","QuestionFormMemo","QuestionForm","Container","fluid","selectListQuestionSelector","createSelector","selectLoadingSelector","isLoading","selectListChoosedAnswerSelector"],"sourceRoot":""}